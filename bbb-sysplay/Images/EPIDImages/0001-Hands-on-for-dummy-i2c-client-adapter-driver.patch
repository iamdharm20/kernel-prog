From 975e48d7fdbf145bd877bd5f779b0dd67f8fc123 Mon Sep 17 00:00:00 2001
From: Pradeep Tewani <pradeep@sysplay.in>
Date: Fri, 21 Jul 2017 17:12:10 +0530
Subject: [PATCH] Hands-on for dummy i2c client & adapter driver

---
 Drivers/I2CDrivers/dummy_adap.c   | 19 ++++++----------
 Drivers/I2CDrivers/dummy_client.c | 46 +++++----------------------------------
 2 files changed, 13 insertions(+), 52 deletions(-)

diff --git a/Drivers/I2CDrivers/dummy_adap.c b/Drivers/I2CDrivers/dummy_adap.c
index 4b302c7..895f521 100644
--- a/Drivers/I2CDrivers/dummy_adap.c
+++ b/Drivers/I2CDrivers/dummy_adap.c
@@ -52,16 +52,14 @@ int dummy_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 	return num;
 }
 
+/* Initialize the algo struct */
 static const struct i2c_algorithm dummy_i2c_algo = {
-	.master_xfer	= dummy_i2c_xfer,
-	.functionality	= dummy_i2c_func,
 };
 
 #ifdef CONFIG_OF
-
+/* Add the Compatible property */
 static const struct of_device_id dummy_i2c_of_match[] = {
 	{
-		.compatible = "dummy_adap",
 	},
 	{ },
 };
@@ -79,17 +77,13 @@ dummy_i2c_probe(struct platform_device *pdev)
 	adap->owner = THIS_MODULE;
 	adap->class = I2C_CLASS_HWMON;
 	strlcpy(adap->name, "Dummy I2C adapter", sizeof(adap->name));
-	adap->algo = &dummy_i2c_algo;
+	/* Initialize the dummy algo field */
 	adap->dev.parent = &pdev->dev;
 	adap->dev.of_node = pdev->dev.of_node;
 
 	/* i2c device drivers may be active on return from add_adapter() */
-	adap->nr = pdev->id;
-	r = i2c_add_numbered_adapter(adap);
-	if (r) {
-		printk("Failure adding adapter\n");
-		return r;
-	}
+	/* Register the adapter driver to the bus */
+
 	platform_set_drvdata(pdev, adap);
 	return r;
 }
@@ -97,7 +91,8 @@ dummy_i2c_probe(struct platform_device *pdev)
 static int dummy_i2c_remove(struct platform_device *pdev)
 {
 	struct i2c_adapter *adapter = platform_get_drvdata(pdev);
-	i2c_del_adapter(adapter);
+
+	/* Unregister the Adapter */
 
 	return 0;
 }
diff --git a/Drivers/I2CDrivers/dummy_client.c b/Drivers/I2CDrivers/dummy_client.c
index 4188b92..5c6a171 100644
--- a/Drivers/I2CDrivers/dummy_client.c
+++ b/Drivers/I2CDrivers/dummy_client.c
@@ -42,15 +42,7 @@ static ssize_t my_read(struct file* f, char *buf, size_t count, loff_t *f_pos)
 	if (tmp == NULL)
 		return -ENOMEM;
 
-	msg.addr = client->addr;
-	msg.flags = client->flags & I2C_M_TEN;
-	msg.flags |= I2C_M_RD;
-	msg.len = count;
-	msg.buf = tmp;
-	printk("Invoking Transfer\n");
-	ret = i2c_transfer(adap, &msg, 1); 
-	if (ret >= 0)
-		ret = copy_to_user(buf, tmp, count) ? -EFAULT : count;
+	/* Fill the msg struct and initiate the transfer */
 	kfree(tmp);
 	return ret;
 }
@@ -62,17 +54,13 @@ static ssize_t my_write(struct file* f, const char *buf, size_t count, loff_t *f
 	struct i2c_client *client = dev->client;
 	char *tmp;
 	struct i2c_msg msg;
-	int ret;
+	int ret = 0;
 
 	tmp = memdup_user(buf, count);
 	if (IS_ERR(tmp))
 		return PTR_ERR(tmp);
-	msg.addr = client->addr;
-	msg.flags = client->flags & I2C_M_TEN;
-	msg.len = count;
-	msg.buf = tmp;
 
-	ret = i2c_transfer(adap, &msg, 1); 
+	/* Fill the msg struct and initiate the transfer */
 	kfree(tmp);
 	return (ret == 1 ? count : ret);
 }
@@ -163,40 +151,18 @@ static int dummy_probe(struct i2c_client *client, const struct i2c_device_id *id
 	}
 	return 0;
 }
-static const struct i2c_device_id dummy_ids[] = {
-	{ "dummy_device", 0},
-	{ }
-};
-MODULE_DEVICE_TABLE(i2c, dummy_ids);
 
-#if 0 //Doesn't works with current kernel version
-static const struct of_device_id dummy_of_match[] = {
-		    { .compatible = "dummy_device", },
-			{ }
-};
-MODULE_DEVICE_TABLE(of, dummy_of_match);
-#endif
-
-static struct i2c_driver dummy_driver = {
-	.driver = {
-		.name = "dummy_client",
-		.owner = THIS_MODULE,
-		//.of_match_table = of_match_ptr(dummy_of_match),
-	},
-	.probe = dummy_probe,
-	.remove = dummy_remove,
-	.id_table = dummy_ids,
-};
+/* Declare and initialize the i2c_driver structure */
 
 static int __init dummy_init(void)
 {
-	return i2c_add_driver(&dummy_driver);
+	/* Register the driver */
 }
 module_init(dummy_init);
 
 static void __exit dummy_exit(void)
 {
-	i2c_del_driver(&dummy_driver);
+	/* Unregister the driver */
 }
 module_exit(dummy_exit);
 
-- 
2.7.4

